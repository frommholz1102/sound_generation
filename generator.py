import librosa
from preprocess import MinMaxNormalizer

class SoundGenerator:
    """
    This class generates audios using the decoder part from the Variational Autoencoder.
    The generated spectrograms are converted to a waveform using the Griffin-Lim algorithm.
    """
    def __init__(self, vae, hop_length):
        self.vae = vae
        self.hop_length = hop_length
        self._minmax_normalizer = MinMaxNormalizer(0,1)

    def generate(self, spectrograms, minmax_values):
        """
        spewctrograms: list of arrays generated by VAE
        minmax_values: list of dictionaries from saved minmax values
        """
        # use VAE method to get spectrograms and latent representations
        generated_spectrograms, latent_representations = self.vae.reconstruct(spectrograms)
        # convert spectrograms to audio waveforms
        signals = self.convert_spectrograms_to_audio(generated_spectrograms, minmax_values)
        return signals, latent_representations
    
    def convert_spectrograms_to_audio(self, spectrograms, minmax_values):
        signals = []
        # go through all spectrograms and convert them to audio
        for spectrogram, minmax_value in zip(spectrograms, minmax_values):
            # reshape
            log_spectrogram = spectrogram[:,:,0] # drop last dimension
            # normalize
            norm_spectrogram = self._minmax_normalizer.denormalize(log_spectrogram, minmax_value["min"], minmax_value["max"])
            # log spectrogram -> spectrogram (dB -> amplitude)
            spectrogram = librosa.db_to_amplitude(norm_spectrogram)
            # ISTFT (Griffin-Lim)
            signal = librosa.istft(spectrogram, hop_length=self.hop_length)
            # append signal to list
            signals.append(signal)